@page "/administration"
@using BlazorServerTemplate.Data
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Identity;
@inject UserManager<ApplicationUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<style>
    .my-custom-class {
        backdrop-filter: blur(10px);
    }
</style>

<h3>Administration</h3>
<AuthorizeView>
    <Authorized>
        @if (@context.User.IsInRole(ADMINISTRATION_ROLE))
        {
            <MudTable Items="ColUsers" Hover="true" Breakpoint="Breakpoint.Sm" Context="user">
                <HeaderContent>
                    <MudTh>Id</MudTh>
                    <MudTh>User Name</MudTh>
                    <MudTh>Email</MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Id">@user.Id.Substring(0, 5) ...</MudTd>
                    <MudTd DataLabel="Name">@user.UserName</MudTd>
                    <MudTd DataLabel="Email">@user.Email</MudTd>
                    <MudButton OnClick="@(()=> EditUser(@user))">Edit</MudButton>
                </RowTemplate>
            </MudTable>

            <MudPopover Open="@ShowPopup" Fixed="true" Class="px-4 pt-4">
                <div class="d-flex flex-column">
                    <MudTextField ReadOnly=true Text="@objUser.Id" T="string" title="ID" />
                    @if (objUser.Id != "")
                    {
                        <MudTextField ReadOnly=true Text="@objUser.UserName" T="string" title="Username" />
                    }
                    else
                    {
                        <MudTextField ReadOnly=false Text="@objUser.UserName" T="string" title="Username"
                            Placeholder="Username" />
                    }
                    <MudTextField ReadOnly=false Text="@objUser.Email" T="string" title="Email" Placeholder="Email" />
                    <MudTextField ReadOnly=false InputType="InputType.Password" Text="@objUser.PasswordHash" T="string"
                        Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick"
                        AdornmentAriaLabel="Show Password" title="Email" Placeholder="Password" />
                    <MudSelect Label="Role" T="string">
                        @foreach (var option in Options)
                        {
                            <MudSelectItem value="@option">
                                @option
                            </MudSelectItem>
                        }
                    </MudSelect>
                    <span style="color:red">@strError</span>
                    <MudButton onclick="SaveUser" Color="Color.Warning">Save</MudButton>
                    <MudButton onclick="DeleteUser" Color="Color.Warning">Delete</MudButton>
                    <MudButton OnClick="@ClosePopup" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>
                </div>
            </MudPopover>
            <!--
            @if (ShowPopup)
            {

                            <div class="modal" tabindex="-1" style="display:block" role="dialog">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h3 class="modal-title">Edit User</h3>
                    <button type="button" class="close" @onclick="ClosePopup">
                        <span aria-hidden="true">X</span>
                    </button>
                    </div>
                    <div class="modal-body">
                            @if (objUser.Id != "")
                            {
                            <p>@objUser.Id</p>
                            }
                            @if (objUser.Id != "")
                            {
                            <p>@objUser.UserName</p>
                            }
                            else
                            {
                            <input class="form-control" type="text" placeholder="UserName" @bind="objUser.UserName" />
                            }
                        <input class="form-control" type="text" placeholder="Email" @bind="objUser.Email" />
                        <input class="form-control" type="password" placeholder="Password" @bind="objUser.PasswordHash" />
                        <select class="form-control" @bind="@CurrentUserRole">
                                @foreach (var option in Options)
                                {
                                <option value="@option">
                                    @option
                                </option>
                                }
                        </select>
                        <br /><br />
                        <button class="btn btn-primary" @onclick="SaveUser">
                            Save
                        </button>
                            @if (objUser.Id != "")
                            {
                            <button class="btn btn-danger" @onclick="DeleteUser">
                                Delete
                            </button>
                            }
                        <br />
                        <span style="color:red">@strError</span>
                    </div>
                    </div>
                    </div>
                    </div>
            }
                -->
        }
        else
        {
            <p>You're not signed in as a user in @ADMINISTRATION_ROLE.</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>You're not loggged in.</p>
    </NotAuthorized>
</AuthorizeView>
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string ADMINISTRATION_ROLE = "Administrators";
    System.Security.Claims.ClaimsPrincipal CurrentUser;
    // Property used to add or edit the currently selected user
    IdentityUser objUser = new IdentityUser();
    // Tracks the selected role for the currently selected user
    string CurrentUserRole { get; set; } = "Users";
    // Collection to display the existing users
    List<IdentityUser> ColUsers = new List<IdentityUser>();
    // Options to display in the roles dropdown when editing a user
    List<string> Options = new List<string>() { "Users", "Administrators" };
    // To hold any possible errors
    string strError = "";
    // To enable showing the Popup
    bool ShowPopup = false;
    bool isShow;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
    InputType PasswordInput = InputType.Password;
    protected override async Task OnInitializedAsync()
    {
        // ensure there is a ADMINISTRATION_ROLE
        var RoleResult = await _RoleManager.FindByNameAsync(ADMINISTRATION_ROLE);
        if (RoleResult == null)
        {
            // Create ADMINISTRATION_ROLE Role
            await _RoleManager.CreateAsync(new IdentityRole(ADMINISTRATION_ROLE));
        }
        // Ensure a user named Admin@BlazorHelpWebsite.com is an Administrator
        var user = await _UserManager.FindByNameAsync("Admin@BlazorHelpWebsite.com");
        if (user != null)
        {
            // Is Admin@BlazorHelpWebsite.com in administrator role?
            var UserResult = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
            if (!UserResult)
            {
                // Put admin in Administrator role
                await _UserManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
            }
        }
        // Get the current logged in user
        CurrentUser = (await authenticationStateTask).User;
        // Get the users
        GetUsers();
    }
    public void GetUsers()
    {
        // clear any error messages
        strError = "";
        // Collection to hold users
        ColUsers = new List<IdentityUser>();
        // get users from _UserManager
        var user = _UserManager.Users.Select(x => new IdentityUser
            {
                Id = x.Id,
                UserName = x.UserName,
                Email = x.Email,
                PasswordHash = "*****"
            });
        foreach (var item in user)
        {
            ColUsers.Add(item);
        }
    }
    void AddNewUser()
    {
        // Make new user
        objUser = new IdentityUser();
        objUser.PasswordHash = "*****";
        // Set Id to blank so we know it is a new record
        objUser.Id = "";
        // Open the Popup
        ShowPopup = true;
    }
    async Task SaveUser()
    {
        try
        {
            // Is this an existing user?
            if (objUser.Id != "")
            {
                // Get the user
                var user = await _UserManager.FindByIdAsync(objUser.Id);
                // Update Email
                user.Email = objUser.Email;
                // Update the user
                await _UserManager.UpdateAsync(user);
                // Only update password if the current value
                // is not the default value
                if (objUser.PasswordHash != "*****")
                {
                    var resetToken =
                    await _UserManager.GeneratePasswordResetTokenAsync(user);
                    var passworduser =
                    await _UserManager.ResetPasswordAsync(
                    user,
                    resetToken,
                    objUser.PasswordHash);
                    if (!passworduser.Succeeded)
                    {
                        if (passworduser.Errors.FirstOrDefault() != null)
                        {
                            strError =
                            passworduser
                            .Errors
                            .FirstOrDefault()
                            .Description;
                        }
                        else
                        {
                            strError = "Pasword error";
                        }
                        // Keep the popup opened
                        return;
                    }
                }
                // Handle Roles
                // Is user in administrator role?
                var UserResult =
                await _UserManager
                .IsInRoleAsync(user, ADMINISTRATION_ROLE);
                // Is Administrator role selected
                // but user is not an Administrator?
                if (
                (CurrentUserRole == ADMINISTRATION_ROLE)
                &
                (!UserResult))
                {
                    // Put admin in Administrator role
                    await _UserManager
                    .AddToRoleAsync(user, ADMINISTRATION_ROLE);
                }
                else
                {
                    // Is Administrator role not selected
                    // but user is an Administrator?
                    if ((CurrentUserRole != ADMINISTRATION_ROLE)
                    &
                    (UserResult))
                    {
                        // Remove user from Administrator role
                        await _UserManager
                        .RemoveFromRoleAsync(user, ADMINISTRATION_ROLE);
                    }
                }
            }
            else
            {
                // Insert new user
                var NewUser =
                new ApplicationUser
                    {
                        UserName = objUser.UserName,
                        Email = objUser.Email
                    };
                var CreateResult =
                await _UserManager
                .CreateAsync(NewUser, objUser.PasswordHash);
                if (!CreateResult.Succeeded)
                {
                    if (CreateResult
                    .Errors
                    .FirstOrDefault() != null)
                    {
                        strError =
                        CreateResult
                        .Errors
                        .FirstOrDefault()
                        .Description;
                    }
                    else
                    {
                        strError = "Create error";
                    }
                    // Keep the popup opened
                    return;
                }
                else
                {
                    // Handle Roles
                    if (CurrentUserRole == ADMINISTRATION_ROLE)
                    {
                        // Put admin in Administrator role
                        await _UserManager
                        .AddToRoleAsync(NewUser, ADMINISTRATION_ROLE);
                    }
                }
            }
            // Close the Popup
            ShowPopup = false;
            // Refresh Users
            GetUsers();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }
    async Task EditUser(IdentityUser _IdentityUser)
    {

        // Set the selected user
        // as the current user
        objUser = _IdentityUser;
        // Get the user
        var user = await _UserManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            // Is user in administrator role?
            var UserResult =
            await _UserManager
            .IsInRoleAsync(user, ADMINISTRATION_ROLE);
            if (UserResult)
            {
                CurrentUserRole = ADMINISTRATION_ROLE;
            }
            else
            {
                CurrentUserRole = "Users";
            }
        }
        // Open the Popup
        ShowPopup = true;
    }
    async Task DeleteUser()
    {
        // Close the Popup
        ShowPopup = false;
        // Get the user
        var user = await _UserManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            // Delete the user
            await _UserManager.DeleteAsync(user);
        }
        // Refresh Users
        GetUsers();
    }
    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
    }
    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}
