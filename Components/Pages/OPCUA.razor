@page "/opcua"
@using BlazorServerTemplate.Data
@using BlazorServerTemplate.Data.OPCUA
@using Opc.Ua
@inject ApplicationDbContext dbContext

@inject IConfiguration config
<h3>OPCUA</h3>


@foreach (var item in opcuaelements)
{
    // <BlazorServerTemplate.Components.Controls.OPCUA.OPCUAElementContainer client="@client" element="@item" Refresh="@Refresh" DeleteMe="@RemoveElement" />
    <p>MyElement</p>
}

<MudPaper Elevation="25">
    <MudToolBar>
        <MudIconButton Icon="@Icons.Material.Outlined.Add" OnClick="Add" />
        <MudIconButton Icon="@Icons.Material.Outlined.Save" OnClick="Save" />
        <MudSpacer />
    </MudToolBar>
</MudPaper>




@code {
    private List<OPCUAElement> opcuaelements = new List<OPCUAElement>();
    private string? server;
    protected override async Task OnInitializedAsync()
    {
        await InitPage();
        await base.OnInitializedAsync();
    }


    private async Task InitPage()
    {
        string endpointUrl = "opc.tcp://DesktopPC:48010"; // Beispiel-Endpoint
        string nodeId = "ns=3;s=PSTV.P1.DS1.Int32"; // Beispiel-Node
        string structure = "ns=3;s=PSTV.P1.DS1";
        var client = new MyOpcUaClient(endpointUrl);

        try
        {
            // Verbindung herstellen
            await client.ConnectAsync();
            
            // Beispiel: Lesen eines Wertes
            int value = client.ReadNode<int>(nodeId);
            DataSet1 dataset1 = client.ReadNode<DataSet1>(structure); 
            Console.WriteLine($"Gelesener Wert: {value}");

            // Beispiel: Schreiben eines Wertes
            client.WriteNode(nodeId, 100);

            // Beispiel: Subskription
            var subscription = client.SubscribeNode(nodeId, (nodeId, newValue) =>
            {
                Console.WriteLine($"Neuer Wert für {nodeId}: {newValue}");
            });

            // 10 Sekunden warten, um Subskriptionsänderungen zu sehen
            await Task.Delay(20000);

            // Subskription entfernen
            subscription.Delete(true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fehler: {ex.Message}");
        }
        finally
        {
            // Verbindung trennen
            await client.DisconnectAsync();
        }
    }


    private async Task Refresh()
    {
        await InvokeAsync(StateHasChanged);
    }
    private async void RemoveElement(OPCUAElement element)
    {
        opcuaelements.Remove(element);
        dbContext.OPCUAElements.Remove(element);
        await dbContext.SaveChangesAsync();
        await Refresh();
    }
    private async Task Add()
    {
        opcuaelements.Add(new OPCUAElement { Top = 200, Left = 300 });
        await Refresh();
    }
    private async Task Save()
    {
        dbContext.UpdateRange(opcuaelements);
        await dbContext.SaveChangesAsync();
    }
}
