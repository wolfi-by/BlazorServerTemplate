@page "/opcua"
@using BlazorServerTemplate.Data
@using BlazorServerTemplate.Data.OPCUA
@using Opc.Ua
@inject ApplicationDbContext dbContext
@implements IAsyncDisposable
@inject MyOpcUaClient client
@inject IConfiguration config
<h3>OPCUA</h3>


@foreach (var item in opcuaelements)
{
    <div>@item</div>
}

<MudPaper Elevation="25">
    <MudToolBar>
        <MudIconButton Icon="@Icons.Material.Outlined.Add" OnClick="Add" />
        <MudIconButton Icon="@Icons.Material.Outlined.Save" OnClick="Save" />
        <MudSpacer />
    </MudToolBar>
</MudPaper>




@code {
    private List<OPCUAElement> opcuaelements = new List<OPCUAElement>();
    private string? server;
    protected override async Task OnInitializedAsync()
    {
        await InitPage();
        await base.OnInitializedAsync();
    }


    private async Task InitPage()
    {

        string nodeId = "ns=3;s=PSTV.P1.DS1.Int32"; // Beispiel-Node
        string structure = "ns=3;s=PSTV.P1.DS1";


        try
        {
            // Verbindung herstellen
            await client.ConnectAsync();

            var subscription = client.SubscribeNode(structure, (nodeId, newValue) =>
            {
                Console.WriteLine($"Neuer Wert für {nodeId}: {newValue}");
            });

            var subscription2 = client.SubscribeNode(nodeId, (nodeId, newValue) =>
            {
                Console.WriteLine($"Neuer Wert für {nodeId}: {newValue}");
            });

            // Beispiel: Lesen eines Wertes
            int value = await client.ReadNodeAsync<int>(nodeId);
            await client.WriteNodeAsync(nodeId, (value + 3)); // Beisp
            subscription2.Delete(false);
            DataSet1 dataset1 = await client.ReadNodeAsync<DataSet1>(structure);
            dataset1.Int32Fast += 9;
            dataset1.Int32 += 33;
            dataset1.DateTime = DateTime.Now;
            dataset1.BoolToggle = !dataset1.BoolToggle;
            await client.WriteNodeAsync(structure, dataset1);

            string dtNode = "ns=3;s=Demo.Static.Arrays.Boolean";
            var datatype = await client.ReadNodeTypeAsync(dtNode);


            string conditioner = "ns=4;s=AirConditioner_1";
            var conditioners = await client.ReadNodeAsync<AirConditioner>(conditioner);

            object[] variants = new object[] { 4, 5 };
            var result = await client.CallMethod("ns=3;s=Demo.Method", "ns=3;s=Demo.Method.Multiply", variants);

            bool[] boolArray = await client.ReadNodeAsync<bool[]>("ns=3;s=Demo.Static.Arrays.Boolean");
            for (var i = 0; i < boolArray.Length; i++)
            {
                boolArray[i] = !boolArray[i];
            }
            await client.WriteNodeAsync("ns=3;s=Demo.Static.Arrays.Boolean", boolArray);

            float[] floatArray = await client.ReadNodeAsync<float[]>("ns=3;s=Demo.Static.Arrays.Float");
            for (var i = 0; i < floatArray.Length; i++)
            {
                floatArray[i] += 1.1f;
            }
            await client.WriteNodeAsync("ns=3;s=Demo.Static.Arrays.Float", floatArray);

            // 10 Sekunden warten, um Subskriptionsänderungen zu sehen
            await Task.Delay(20000);

            // Subskription entfernen
            subscription.Delete(true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fehler: {ex.Message}");
        }
        finally
        {
            // Verbindung trennen
            await client.DisconnectAsync();
        }
    }


    private async Task Refresh()
    {
        await InvokeAsync(StateHasChanged);
    }
    private async void RemoveElement(OPCUAElement element)
    {
        opcuaelements.Remove(element);
        dbContext.OPCUAElements.Remove(element);
        await dbContext.SaveChangesAsync();
        await Refresh();
    }
    private async Task Add()
    {
        string dtNode = "ns=3;s=Demo.Static.Arrays.Boolean";
        var datatype = await client.ReadNodeTypeAsync(dtNode);
        OPCUAElement newElement = new OPCUAElement()
       
        {
                Source = dtNode,
                Type = OPCUAElementType.FromValue(2),
                Label = "Initial Value"
            };
        opcuaelements.Add(newElement);
        await Refresh();
    }
    private async Task Save()
    {
        dbContext.UpdateRange(opcuaelements);
        await dbContext.SaveChangesAsync();
    }

    public async ValueTask DisposeAsync()
    {
        await client.DisconnectAsync();
    }


}
