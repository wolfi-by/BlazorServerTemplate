@page "/opcua"
@using BlazorServerTemplate.Data
@using BlazorServerTemplate.Data.OPCUA
@inject ApplicationDbContext dbContext

@inject OpcUaComplexTypeSystemSessionBuilder sessionBuilder
@inject IConfiguration config
<h3>OPCUA</h3>


@foreach(var item in opcuaelements)
{
    // <BlazorServerTemplate.Components.Controls.OPCUA.OPCUAElementContainer client="@client" element="@item" Refresh="@Refresh" DeleteMe="@RemoveElement" />
    <p>MyElement</p>
}

<MudPaper Elevation="25">
    <MudToolBar>
        <MudIconButton Icon="@Icons.Material.Outlined.Add" OnClick="Add" />
        <MudIconButton Icon="@Icons.Material.Outlined.Save" OnClick="Save" />
        <MudSpacer />
    </MudToolBar>
</MudPaper>




@code {
    private List<OPCUAElement> opcuaelements = new List<OPCUAElement>();
    private string? server;
    protected override async Task OnInitializedAsync()
    {
        await InitPage();
        await base.OnInitializedAsync();
    }

    private async Task InitPage()
    {
        var session= await   sessionBuilder.BuildAsync("MyTest", "opc.tcp://DesktopPC:48010", CancellationToken.None);



        server = config["OPCUAServer"] ?? string.Empty;
        if (!string.IsNullOrEmpty(server))
        {


        }

       var result= session.ReadNode(new Opc.Ua.NodeId("ns=4;s=AirConditioner_1"));

        opcuaelements = dbContext.OPCUAElements.ToList();
    }

    private async Task Refresh()
    {
        await InvokeAsync(StateHasChanged);
    }
    private async void RemoveElement(OPCUAElement element)
    {
        opcuaelements.Remove(element);
        dbContext.OPCUAElements.Remove(element);
        await dbContext.SaveChangesAsync();
        await Refresh();
    }
    private async Task Add()
    {
        opcuaelements.Add(new OPCUAElement { Top = 200, Left = 300 });
        await Refresh();
    }
    private async Task Save()
    {
        dbContext.UpdateRange(opcuaelements);
        await dbContext.SaveChangesAsync();
    }
}
