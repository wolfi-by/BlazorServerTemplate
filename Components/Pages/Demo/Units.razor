@page "/units"
@using BlazorServerTemplate.Components.Controls
@using BlazorServerTemplate.Data
@inject ApplicationDbContext context
@inject ISnackbar Snackbar
<h3>Units</h3>


<QuantityCreator />

<MudDataGrid Items="@_quantityMappings" T="QuantityMappingRecord">
    <Columns>
        <PropertyColumn Property="x => x.Value" Title="Value" />
        <PropertyColumn Property="x => x.QuantityName" />
        <PropertyColumn Property="x => x.UnitName" />
        <PropertyColumn Property="x => x.MinValue" />
        <PropertyColumn Property="x => x.MaxValue"  />
        <PropertyColumn Property="@((x)=>GetQuantity(x))" />
        <TemplateColumn CellClass="d-flex justify-end" >
            <CellTemplate>
                <MudStack Row>
                    <MudButton OnClick="@(()=>RemoveItem(context.Item.id))" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Error">Remove</MudButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>


@code {

    private QuantityMappingRecord[] _quantityMappings = default!;

    protected override async void OnInitialized()
    {
        _quantityMappings = await context.GetQuantityMappingsAsync();
        base.OnInitialized();
    }

    string GetQuantity(QuantityMappingRecord mapping)
    {
        if (Quantity.TryFrom(mapping.Value,mapping.QuantityName, mapping.UnitName, out IQuantity? quantity))
        {
            if (quantity is not null){
            return quantity!.ToString();
            }
            return string.Empty;
        }
        return string.Empty;
    }
   async void RemoveItem(string id)
    {
       var removeResult = await context.RemoveQuantityMappingsAsync(Guid.Parse(id));
        if (removeResult is not null)
        {
            _quantityMappings = await context.GetQuantityMappingsAsync();
            Snackbar.Add("Item removed", Severity.Success);
        }
        else{
            Snackbar.Add("Failed to remove item", Severity.Error);
        }
    }

}
