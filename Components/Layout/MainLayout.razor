@inherits LayoutComponentBase

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="customTheme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
        OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">Application</MudText>
        <MudSpacer />


        <MudSwitch @bind-Value="_isDarkMode" Color="Color.Primary" Class="ma-4" T="bool"
        Label="Toggle Light/Dark Mode" />
        <CultureSelector />


    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>
@code {
    private bool _drawerOpen = true;

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider = default!;

    private MudTheme customTheme = new MudTheme();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
         
            customTheme = new MudTheme()
                {
                    
                    PaletteLight = new PaletteLight()
                    {
                        AppbarBackground = new MudBlazor.Utilities.MudColor("#003D59"),
                        Primary = new MudBlazor.Utilities.MudColor("#003D59"),
                        Secondary = new MudBlazor.Utilities.MudColor("#013243"),
                    },
                    PaletteDark = new PaletteDark()
                    {
                        AppbarBackground = new MudBlazor.Utilities.MudColor("#1DACD6"),
                        Primary = new MudBlazor.Utilities.MudColor("#1DACD6"),
                        Secondary = new MudBlazor.Utilities.MudColor("#48D1CC"),
                    }
                };
            

            StateHasChanged();
        }
    }

    private Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }

    

}
