@using BlazorServerTemplate.Data.OPCUA
@using OpcLabs.EasyOpc.UA
@using OpcLabs.EasyOpc.UA.OperationModel


<MudNumericField T="double" Value="@value" Label="@element.Label" Variant="Variant.Outlined" ValueChanged="@(x=>HandleValue(x))" Color="Color.Info" HideSpinButtons />
@code {
    [Parameter]
    public object _value { get; set; } = default!;
    private double value
    {
        get
        {if (_value is null) return 0.0;
            return Convert.ToDouble(_value);
        }
    }
    [Parameter]
    public OpcLabs.EasyOpc.UA.EasyUAClient client { get; set; } = default!;
    [Parameter]
    public OPCUAElement element { get; set; } = default!;
    [Parameter]
    public string opcuaserver { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        AddSubscription();
        await base.OnInitializedAsync();
    }

    private void AddSubscription()
    {
        if (string.IsNullOrEmpty(opcuaserver)) return;
        if (string.IsNullOrEmpty(element.Source)) return;

        client.SubscribeDataChange(opcuaserver, element.Source, 500, (_, args) => HandleSubscriptionValue(args));
    }
    private void HandleSubscriptionValue(EasyUADataChangeNotificationEventArgs args)
    {if (args.AttributeData is null) return;
        _value = (double)args.AttributeData.Value;
    }


    private void HandleValue(double? value)
    {
        if (value is null) return;
        _value = value;
        if (string.IsNullOrEmpty(opcuaserver)) return;

        if (string.IsNullOrEmpty(element.Source)) return;
        try
        {
            var res = client.Read(opcuaserver, element.Target);
            var converted = Convert.ChangeType(_value, res.ValueType);
            var (clamped, result) = client.WriteValue(opcuaserver, element.Target, converted, res.ValueType);
        }
        catch { }
    }
}
