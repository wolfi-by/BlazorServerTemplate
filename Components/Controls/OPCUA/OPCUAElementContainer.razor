
@using Microsoft.Extensions.Configuration
@using BlazorServerTemplate.Data.OPCUA
@using Opc.Ua.Client
@inject IConfiguration config


<div style="@GetStyle" draggable="true" @ondragstart="OnDragStart" @ondragend="OnDragEnd" @oncontextmenu:preventDefault="true" @oncontextmenu="OnContextMenu">

    @if (element.Type== OPCUAElementType.ToggleSwitch.Value)
    {
        <MudSwitch T="bool" Value="@boolValue" ValueChanged="BoolChanged" Label="@element.Label" LabelPlacement="Placement.Right" Color="Color.Info" UncheckedColor="Color.Warning" />
    }
    else if (element.Type == OPCUAElementType.IntField.Value)
    {
        <MudNumericField T="Int16" Value="@IntValue" ValueChanged="IntChanged" Label="@element.Label" Variant="Variant.Text" />

    }
    else if (element.Type == OPCUAElementType.FloatField.Value)
    {
        <MudNumericField T="double" Value="@DoubleValue" ValueChanged="DoubleChanged" Label="@element.Label" Variant="Variant.Filled" />
    }
    else
    {
        <p>right click</p>
    }


    <MudPopover Open="@_open" Class="pa-4" Fixed="true" RelativeWidth="@_dropdownWidth" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
        <MudTextField @bind-Value="element.Label" Label="Outlined" Variant="Variant.Outlined"></MudTextField>

        <MudSelect T="int" @bind-Value="@element.Type"
        Variant="Variant.Outlined"
        Label="Select type"
        Margin="Margin.Dense"
        Dense="true">

            @foreach (var item in OPCUAElementType.List)
            {
                <MudSelectItem Value="@item.Value">@item.Name</MudSelectItem>
            }
        </MudSelect>
        <MudTextField @bind-Value="element.Source" Label="Source" Variant="Variant.Outlined"></MudTextField>
        <MudTextField @bind-Value="element.Target" Label="Target" Variant="Variant.Outlined"></MudTextField>
        <MudButton OnClick="@ToggleOpen" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>
        <MudIconButton Icon="@Icons.Material.Outlined.Delete"  OnClick="@Delete" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudIconButton>
    </MudPopover>

</div>
@code {

    private bool boolValue = false;
    private Int16 IntValue = 0;
    private double DoubleValue = 0;


    private int subscriptionhandle=0;
    private bool _open;
    private object _value =default!;
    private DropdownWidth _dropdownWidth = DropdownWidth.Ignore;




    private void WriteValue(object value)
    {
        var tag=client.Read<MyObject>(element.Target);



        //tag.Value = (double)value;
        //client.Write(tag);
    }


    private async Task ToggleOpen()
    {
        _open = !_open;
        if (!_open)
        {
            AddSubscription();
            await Refresh.InvokeAsync();
        }
        else
        {
            RemoveSubscription();
            if (subscriptionhandle==0) return;

        }

    }
    [Parameter]
    public UaClient client { get; set; } = default!;
    [Parameter]
    public OPCUAElement element { get; set; } = default!;
    [Parameter]
    public EventCallback<OPCUAElement> DeleteMe { get; set; }
    [Parameter]
    public EventCallback Refresh { get; set; }

    private async Task Delete()
    {
        _open = false;
        await DeleteMe.InvokeAsync(element);
    }
    private string GetStyle
    {
        get
        {
            return $"position:absolute; top: {element.Top}px; left: {element.Left}px;";
        }
    }
    private string opcuaserver = string.Empty;

    private double startX, startY, offsetX, offsetY;
    private void OnDragStart(DragEventArgs args)
    {
        startX = args.ClientX;
        startY = args.ClientY;
    }
    private async void OnDragEnd(DragEventArgs args)
    {
        offsetX = args.ClientX - startX;
        offsetY = args.ClientY - startY;
        element.Left += offsetX;
        element.Top += offsetY;
        _open = false;
        await Refresh.InvokeAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        AddSubscription();
        await base.OnInitializedAsync();
    }
    private async Task OnContextMenu()
    {
        await ToggleOpen();
    }

    private async void AddSubscription()
    {
        if (client == null || !client.IsConnected) return;
        
        if (string.IsNullOrEmpty(element.Source)) return;
      
        client.Monitoring( element.Source, 500,  (sender, args) => {  HandleSubscriptionValue(sender, args); });
    }
    private void RemoveSubscription()

    {
        if (client == null || !client.IsConnected) return;
        if (string.IsNullOrEmpty(opcuaserver)) return;
        if (string.IsNullOrEmpty(element.Source)) return;

        client.RemoveMonitoring(element.Source);
    }
    private  void HandleSubscriptionValue(MonitoredItem sender, MonitoredItemNotificationEventArgs args)
    {
        var monitored = (Opc.Ua.MonitoredItemNotification)args.NotificationValue;
        if (element.Type == OPCUAElementType.ToggleSwitch.Value)
        {
            if (bool.TryParse(monitored.Value.ToString(), out bool result))
            {
                boolValue = result;
            }
            else
            {
                boolValue = false;
            }
            
        }
        else if (element.Type == OPCUAElementType.IntField.Value)
        {
            if (Int16.TryParse(monitored.Value.ToString(), out Int16 result))
            {
                IntValue = result;
            }
            else
            {
                IntValue = 0;
            }
            
        }
        else if (element.Type == OPCUAElementType.FloatField.Value)
        {
            if (double.TryParse(monitored.Value.ToString(), out double result))
            {
                DoubleValue = result;
            }
            else
            {
                DoubleValue = 0;
            }
           
        }
        InvokeAsync(StateHasChanged);
    }
    private void BoolChanged(bool args)
    {

        boolValue = !boolValue;
        WriteValue(args);

    }
    private void IntChanged(Int16 args)
    {
        IntValue = args;
        WriteValue(args);
    }
    private void DoubleChanged(double args)
    {
        DoubleValue = args;
        WriteValue(args);
    }
}
